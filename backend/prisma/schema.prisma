// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String
  address   String?
  role      String   @default("CUSTOMER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings  Booking[]
  reviews   Review[]
  resetCode String?
  resetCodeExpiresAt DateTime?
}

model Vehicle {
  id           Int      @id @default(autoincrement())
  make         String
  model        String
  year         Int
  licensePlate String   @unique
  imageUrl     String
  pricePerDay  Decimal
  isAvailable  Boolean  @default(true)
  category     String
  features     String?
  locationId   Int
  location     Location @relation(fields: [locationId], references: [id])
  bookings     Booking[]
  reviews      Review[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Booking {
  id                Int      @id @default(autoincrement())
  bookingDate       DateTime @default(now())
  startDate         DateTime
  endDate           DateTime
  totalPrice        Decimal
  status            String   @default("PENDING")
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  vehicleId         Int
  vehicle           Vehicle  @relation(fields: [vehicleId], references: [id])
  pickupLocationId  Int
  pickupLocation    Location @relation("Pickup", fields: [pickupLocationId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  dropoffLocationId Int
  dropoffLocation   Location @relation("Dropoff", fields: [dropoffLocationId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Location {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  address         String
  vehicles        Vehicle[]
  pickupBookings  Booking[] @relation("Pickup")
  dropoffBookings Booking[] @relation("Dropoff")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  vehicleId Int
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?
  action     String
  resource   String
  resourceId Int?
  details    String?
  createdAt  DateTime @default(now())
}
